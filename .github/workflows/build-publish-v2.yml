name: build-publish-scan
on:
    push:
        branches:
         main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  attestations: write
jobs:
    build-publish-python:
        runs-on: ubuntu-latest              
        env:
          DOCKER_REPO: 'carmit-prj-1-carmit-docker-local'
          IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
          JF_URL: https://${{ vars.JF_URL }}/
          JF_PROJECT: carmit-prj-1
          DOCKER_CLI_EXPERIMENTAL: enabled
          NOW_URL: ${{ vars.NOW_URL }}
          RB_VERSION: '1.0.6'
        outputs:
          image:  ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
          digest: ${{ steps.set_vars.outputs.docker_digest }}
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ env.JF_PROJECT }}
              with:
                  oidc-provider-name: evidence-demo

            - name: Checkout the repository
              uses: actions/checkout@v4


            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf pip-config --repo-resolve=carmit-prj-1-carmit-python-remote 

            - name: configure environment
              run: |    
                pip install --upgrade pip     
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |                                   
                jf pip install -r requirements.txt  --module=jfrog-python-example                
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: check file system
              run: |   
                echo "ls ."
                ls -ltr .
                echo "ls dist"
                ls -ltr dist
                
                
            #- name: Generate artifact attestation
            #  uses: actions/attest-build-provenance@v1
            #  with:
            #    subject-path: 'dist/jfrog_python_example-1.0.tar.gz'
                
            - name: publish python package
              run: |
                jf rt u dist/ carmit-prj-1-carmit-python/example-projects/

           # - name: check file system post binary attestation
           #   run: |   
           #     echo "ls ."
                
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3                 

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}

            - name: Setup buildx instance
              uses: docker/setup-buildx-action@v3
              with:
                use: true
                platforms: linux/amd64,linux/arm64
                install: true

            - name: docker build through 
              run: |  
                docker buildx ls
                jf docker --version
                jf docker build --tag ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} --platform linux/amd64,linux/arm64 --metadata-file  metadata.json --push .

            - name: get docker digest
              id: set_vars
              run: |  
                 echo "----------------"
                 cat metadata.json
                 echo "----------------"
                 digest=$(cat metadata.json | jq '.["containerimage.digest"]')
                 echo "digest=$digest"
                 echo "docker_digest=$digest" | tr -d '"' >> $GITHUB_OUTPUT

            - name: Generate docker attestation
              id: attest
              uses: actions/attest-build-provenance@v1
              with:
                subject-name: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/my-very-cool-image
                subject-digest: ${{ steps.set_vars.outputs.docker_digest }}
                push-to-registry: true

            - name: check attestation bundle
              run: |
                echo "bundle-path=${{ steps.attest.outputs.bundle-path }} "
                echo "----------------"
                cat ${{ steps.attest.outputs.bundle-path }} 
                echo "----------------"
                
            #- name: docker scan
            # disabled because sca fails now on failed with error: Found invalid token
            #  run: |  
            #     jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
            #     jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}   
            #- name: docker build
            #  run: |  
            #    jf docker build --tag ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-amd64 --platform  linux/amd64 --load .
            #    #docker images
            #    jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-amd64                
            #    jf docker push ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-amd64
                
            #    jf docker build --tag ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-arm64 --platform  linux/arm64 --load .
            #    #docker images
            #    jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-arm64                
            #    jf docker push ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-arm64
                
            #    #echo "docker images scanned, now lets push a fat manifest and the images"
            #    #docker manifest create  ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-amd64 ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}-arm64                
            #    #echo "docker manifest created"
            #    #docker manifest push ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
            #    #echo "docker manifest pushed"
            #    #docker image save -o myimage.tar localhost:5000/myimage:latest
                

            - name: add docker package to build
              run: |  
                 echo "----------------"
                 cat metadata.json
                 echo "----------------"
                 digest=$(cat metadata.json | jq '.["containerimage.digest"]')
                 echo "digest=$digest"
                 echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@$digest" > metadata.json
                 jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

            - name: publish build info
              run: |
                jf rt build-collect-env 
                jf rt build-add-dependencies .
                jf rt build-add-git
                jf rt build-publish

            - name: create release bundle
              run: |
                echo '{"files":[{"build": "${{ env.JFROG_CLI_BUILD_NAME }}/${{ env.JFROG_CLI_BUILD_NUMBER }}","includeDeps": "false","project":"${{ env.JFROG_CLI_BUILD_PROJECT }}"}]}' > build.json
                echo "**************"
                cat build.json
                echo "**************"
                jf release-bundle-create --signing-key test --spec build.json my-release-bundle-demo ${{ env.RB_VERSION }}
    

          #  - name: request_promotion
          #    run: |
          #        curl "${{ vars.NOW_URL }}/api/x_1560608_jfrog_1/release_promotion_request" \
          #          --request PUT \
          #          --header "Accept:application/json" \
          #          --header "Content-Type:application/json" \
          #          --data "{\"release_name\": \"my-release-bundle-demo\",
          #          \"project_key\":\"${{ env.JFROG_CLI_BUILD_PROJECT }}\",
          #          \"release_version\":\"${{ env.RB_VERSION }}\",
          #          \"target_environment\": \"DEV\"
          #          }" \
          #          --user 'admin':${{ secrets.SNOW_PASSWORD }}
                    
# removed \"project_key\":\"${{ env.JFROG_CLI_BUILD_PROJECT }}\",
                    
            #- name: build scan
            #  run: |            
            #    jf build-scan
                
            #- name: Write to workflow job summary
            #  run: |
            #        NOTE=$'>[!NOTE]\n>Frog Notes \n'
            #        TIP=$'>[!TIP]\n>Hello JFrog\n'
            #        IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE\n'
            #        WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
            #        CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
            #        echo "$NOTE" >> $GITHUB_STEP_SUMMARY
            #        echo "$TIP" >> $GITHUB_STEP_SUMMARY
            #        echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
            #        echo "$WARNING" >> $GITHUB_STEP_SUMMARY
            #        echo "$CAUTION" >> $GITHUB_STEP_SUMMARY
    #SLSA Build Level 3 provenance
    provenance:
      needs: [build-publish-python]
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
      with:
          image:  ${{ needs.build-publish-python.outputs.image }}
          digest: ${{ needs.build-publish-python.outputs.digest }}
          private-repository: true          
      secrets:
          registry-username: ${{ secrets.JF_ACCESS_USER }}
          registry-password: ${{ secrets.JF_ACCESS_TOKEN }}
