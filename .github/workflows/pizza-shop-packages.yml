name: napapizza Service Docker Workflow

on:
  workflow_dispatch: 

env:
  PACKAGE_DIR: .github/scripts/packages/barber-shop-packages

jobs:
  build-and-push-docker:
    runs-on: self-hosted
    permissions:
      contents: write
      id-token: write
      attestations: write
    
    steps:
      - uses: actions/checkout@v4
      - name: allow scripts execution
        run: |
          chmod 775 ${{ env.PACKAGE_DIR }}/scripts/*

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm install

      - name: Run tests        
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm test
        
      - name: read props from docker-info.properties
        id: read_props
        run: |
          source ./jfrog-info.properties
          echo "ARTIFACTORY_HOST=$ARTIFACTORY_HOST"
          echo "ARTIFACTORY_HOST=$ARTIFACTORY_HOST" | tr -d '"' >> $GITHUB_OUTPUT
          echo "LOCAL_REPO_NAME=$LOCAL_REPO_NAME"
          echo "LOCAL_REPO_NAME=$LOCAL_REPO_NAME" | tr -d '"' >> $GITHUB_OUTPUT
          echo "ARTIFACTORY_URL=$ARTIFACTORY_URL"
          echo "ARTIFACTORY_URL=$ARTIFACTORY_URL" | tr -d '"' >> $GITHUB_OUTPUT
          echo "OIDC_PROVIDER_NAME=$OIDC_PROVIDER_NAME"
          echo "OIDC_PROVIDER_NAME=$OIDC_PROVIDER_NAME" | tr -d '"' >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" | tr -d '"' >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" | tr -d '"' >> $GITHUB_OUTPUT
          
      - name: Setup JFrog CLI
        id: setup-cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ steps.read_props.outputs.ARTIFACTORY_URL }}
        with:          
          oidc-provider-name: ${{ steps.read_props.outputs.OIDC_PROVIDER_NAME }}

      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.read_props.outputs.ARTIFACTORY_HOST }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          install: true 

      - name: Build and push Docker image
        id: build-and-push
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          docker build --tag ${{ steps.read_props.outputs.ARTIFACTORY_HOST }}/${{ steps.read_props.outputs.LOCAL_REPO_NAME }}/${{ steps.read_props.outputs.PACKAGE_NAME }}:${{ steps.read_props.outputs.VERSION }} --metadata-file metadata.json --push .
          #jf rt docker-push ${{ steps.read_props.outputs.ARTIFACTORY_HOST }}/${{ steps.read_props.outputs.LOCAL_REPO_NAME }}/${{ steps.read_props.outputs.PACKAGE_NAME }}:${{ steps.read_props.outputs.VERSION }} ${{ steps.read_props.outputs.LOCAL_REPO_NAME }}
          digest=$(cat metadata.json | jq '.["containerimage.digest"]')
          echo "docker_digest=$digest" | tr -d '"' >> $GITHUB_OUTPUT

      - name: Generate Docker attestation
        id: attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.read_props.outputs.LOCAL_REPO_NAME }}/${{ steps.read_props.outputs.PACKAGE_NAME }}/${{ steps.read_props.outputs.VERSION }}/list.manifest.json
          subject-digest: ${{ steps.build-and-push.outputs.docker_digest }}

      - name: Extract and decode attestation content
        id: extract-content
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          echo "pwd"
          pwd
          echo "ls -ltr ."
          ls -ltr .
          ls -ltr ./scripts
          cp "${{ steps.attest.outputs.bundle-path }}" ./attestation_bundle.json
          echo "------------------attestation bundle-----------------"
          cat ${{ steps.attest.outputs.bundle-path }}
          echo "-----------------------------"
          cat ./attestation_bundle.json | jq -r '.dsseEnvelope.payload' | base64 -d > ./decoded_payload.json
          ./scripts/generate_attestation_markdown.sh ./decoded_payload.json ./attestation_summary.md

      #- name: Get Sonar report
      #  working-directory: ${{ env.PACKAGE_DIR }}
      #  run: |
      #    curl --location 'https://api.sonarcloud.io/dop-translation/jfrog-evidence/AZjGllrsJNTbE25TYCVl' \
      #    --header 'Accept: application/json' \
      #    --header 'Authorization: Bearer ${{ secrets.SONAR_TOKEN }}' \
      #    --output sonar_report.json
      

      #- name: Generate Sonar markdown
      #  working-directory: ${{ env.PACKAGE_DIR }}
      #  run: |
      #    ./scripts/generate_sonar_markdown.sh ./assets/sonar/sonar_report.json ./sonar_report.md

      #- name: Attach evidence using jfrog cli
      #  working-directory: ${{ env.PACKAGE_DIR }}
      #  run: |
      #    jf evd create --sigstore-bundle ${{ steps.attest.outputs.bundle-path }} \
      #      --subject-repo-path ${{ steps.read_props.outputs.LOCAL_REPO_NAME }}/${{ steps.read_props.outputs.PACKAGE_NAME }}/${{ steps.read_props.outputs.VERSION }}/manifest.json \                        

      - name: Attach sonar evidence using jfrog cli
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |      
          jf evd create \
          --package-name ${{ steps.read_props.outputs.PACKAGE_NAME }} \
          --package-version ${{ steps.read_props.outputs.VERSION }} \
          --package-repo-name ${{ steps.read_props.outputs.LOCAL_REPO_NAME }} \
          --key "${{ secrets.JFROG_CLI_SIGNING_KEY }}" \
          --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" \
          --predicate-type https://sonarsource.com/evidence/sonarqube/v1 \
          --predicate ./assets/sonar/sonar_report.json \
          --markdown ./assets/sonar/sonar_report.md \
          --provider-id sonar
