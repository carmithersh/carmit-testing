name: test-provenance
on:
    push:
        branches:
         main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  attestations: write
jobs:
    build:
        runs-on: ubuntu-latest              
        env:
          DOCKER_REPO: 'test-docker-local'
          IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
          JF_URL: https://${{ vars.JF_URL }}/
          JF_PROJECT: "default"
          DOCKER_CLI_EXPERIMENTAL: enabled
          NOW_URL: ${{ vars.NOW_URL }}
          RB_VERSION: '2.0.1'
        outputs:
          image:  ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
          digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                #JF_PROJECT: ${{ env.JF_PROJECT }}
              with:
                  oidc-provider-name: evidence-demo

            - name: Checkout the repository
              uses: actions/checkout@v4


            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf pip-config --repo-resolve=carmit-prj-1-carmit-python-remote 

            - name: configure environment
              run: |    
                pip install --upgrade pip     
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |                                   
                jf pip install -r requirements.txt  --module=jfrog-python-example                
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: check file system
              run: |   
                echo "ls ."
                ls -ltr .
                echo "ls dist"
                ls -ltr dist
   
            - name: publish python package
              run: |
                jf rt u dist/ carmit-prj-1-carmit-python/example-projects/

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}
              # docker image build
            - name: Build and Push Docker image
              uses: docker/build-push-action@v6
              id: build
              with:
                push: true
                provenance: true
                platforms: linux/amd64 #, linux/arm64
                tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

            - name: add docker package to build
              run: |  
                 echo "----------------"
                 cat metadata.json
                 echo "----------------"
                 digest=$(cat metadata.json | jq '.["containerimage.digest"]')
                 echo "digest=$digest"
                 echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
                 jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

            - name: publish build info
              run: |
                jf rt build-collect-env 
                jf rt build-add-dependencies .
                jf rt build-add-git
                jf rt build-publish

    #SLSA Build Level 3 provenance
    provenance:
      needs: [build]
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
      with:
          image:  ${{ needs.build.outputs.image }}
          digest: ${{ needs.build.outputs.digest }}
          private-repository: true          
      secrets:
          registry-username: ${{ secrets.JF_ACCESS_USER }}
          registry-password: ${{ secrets.JF_ACCESS_TOKEN }}
