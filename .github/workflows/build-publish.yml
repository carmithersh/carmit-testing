name: oidc-poc-cli
on:
    push:
        branches:

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-python:
        
        runs-on: ubuntu-latest
        env:
          DOCKER_REPO: 'docker-local3'
          IMAGE_NAME: 'carmit-testing:6'
          BUILD_NUMBER: 4
          BUILD_NAME: my-testing-build
          JF_URL: https://${{ vars.JF_URL }}/
        outputs:
          image: "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}"
          digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout the repository    
              uses: actions/checkout@v4
              
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              env: 
                JF_URL: ${{ env.JF_URL }}
              with:
                  oidc-provider-name: github-carmit-project-1

            - name: configure jfrog environment
              run: |
                jf pip-config --repo-resolve=python-virtual    
                
            - name: configure environment
              run: |                      
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV
                
            - name: build project
              run: |                               
                jf pip install -r requirements.txt --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}  --module=jfrog-python-example
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ python-virtual/example-projects/ --build-name=${{ env.BUILD_NAME }}  --build-number=${{ env.BUILD_NUMBER }}  --module=jfrog-python-example --project ${{ vars.JF_PROJECT_KEY }} 

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3    
                
            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ vars.JF_DOCKER_USER }} 
                password: ${{ secrets.JF_DOCKER_TOKEN }} 
    
                
            - name: Build Docker image    
              uses: docker/build-push-action@v5
              id: build
              with:
                push: true
                platforms: linux/amd64, linux/arm64
                tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}          
                        
            - name: docker scan
              run: |  
                 jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                               

            - name: add docker package to build
              run: |  
                 echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
                 jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json --build-name ${{ env.BUILD_NAME }}  --build-number ${{ env.BUILD_NUMBER }} --project ${{ vars.JF_PROJECT_KEY }}
                 
            - name: publish build info
              run: |
                jf rt bce ${{ env.BUILD_NAME }}  ${{ env.BUILD_NUMBER }} 
                jf rt bp ${{ env.BUILD_NAME }}  ${{ env.BUILD_NUMBER }}  --project ${{ vars.JF_PROJECT_KEY }}
                jf build-scan  --format sarif --fail=false --project ${{ vars.JF_PROJECT_KEY }}  ${{ env.BUILD_NAME }}  ${{ env.BUILD_NUMBER }} 
            
    provenance:
      needs: [build-publish-python]
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
      with:
        image:  ${{ needs.build-publish-python.outputs.image }}
        digest: ${{ needs.build-publish-python.outputs.digest }}
        private-repository: true
      secrets:
        registry-username: ${{ vars.JF_DOCKER_USER }} 
        registry-password: ${{ secrets.JF_DOCKER_TOKEN }} 
